{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lenovo/Downloads/bus/client/src/containers/auth/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"../../actions/alert\";\nimport PropTypes from \"prop-types\";\nimport { register } from \"../../actions/auth\";\nimport Present_register from \"../../components/auth/Register\";\n\nconst Register = ({\n  setAlert,\n  register,\n  isAuthenticated\n}) => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    category: \"\",\n    password: \"\",\n    password2: \"\"\n  });\n  const {\n    name,\n    email,\n    category,\n    password,\n    password2\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (password !== password2) setAlert(\"Passwords dont match\", \"danger\");else register({\n      name,\n      email,\n      category,\n      password\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Present_register, {\n    isAuthenticated: isAuthenticated,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    formData: formData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"Eh/8qUO555bKbYJT2/Vq618idjs=\");\n\n_c = Register;\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  register\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/lenovo/Downloads/bus/client/src/containers/auth/Register.js"],"names":["React","Fragment","useState","connect","setAlert","PropTypes","register","Present_register","Register","isAuthenticated","formData","setFormData","name","email","category","password","password2","onChange","e","target","value","onSubmit","preventDefault","propTypes","func","isRequired","bool","mapStateToProps","state","auth"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEJ,EAAAA,QAAF;AAAYE,EAAAA,QAAZ;AAAsBG,EAAAA;AAAtB,CAAD,KAA6C;AAAA;;AAC5D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC;AACvCU,IAAAA,IAAI,EAAE,EADiC;AAEvCC,IAAAA,KAAK,EAAE,EAFgC;AAGvCC,IAAAA,QAAQ,EAAE,EAH6B;AAIvCC,IAAAA,QAAQ,EAAE,EAJ6B;AAKvCC,IAAAA,SAAS,EAAE;AAL4B,GAAD,CAAxC;AAOA,QAAM;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,MAAiDN,QAAvD;;AACA,QAAMO,QAAQ,GAAIC,CAAD,IACfP,WAAW,CAAC,EACV,GAAGD,QADO;AAEV,KAACQ,CAAC,CAACC,MAAF,CAASP,IAAV,GAAiBM,CAAC,CAACC,MAAF,CAASC;AAFhB,GAAD,CADb;;AAKA,QAAMC,QAAQ,GAAIH,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACI,cAAF;AACA,QAAIP,QAAQ,KAAKC,SAAjB,EAA4BZ,QAAQ,CAAC,sBAAD,EAAyB,QAAzB,CAAR,CAA5B,KACKE,QAAQ,CAAC;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,KAAD,CAAR;AACN,GAJD;;AAMA,sBACE,QAAC,gBAAD;AACE,IAAA,eAAe,EAAEN,eADnB;AAEE,IAAA,QAAQ,EAAEQ,QAFZ;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAIE,IAAA,QAAQ,EAAEX;AAJZ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5BD;;GAAMF,Q;;KAAAA,Q;AA6BNA,QAAQ,CAACe,SAAT,GAAqB;AACnBnB,EAAAA,QAAQ,EAAEC,SAAS,CAACmB,IAAV,CAAeC,UADN;AAEnBnB,EAAAA,QAAQ,EAAED,SAAS,CAACmB,IAAV,CAAeC,UAFN;AAGnBhB,EAAAA,eAAe,EAAEJ,SAAS,CAACqB;AAHR,CAArB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCnB,EAAAA,eAAe,EAAEmB,KAAK,CAACC,IAAN,CAAWpB;AADM,CAAZ,CAAxB;;AAGA,eAAeN,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA,QAAF;AAAYE,EAAAA;AAAZ,CAAlB,CAAP,CAAiDE,QAAjD,CAAf","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"../../actions/alert\";\nimport PropTypes from \"prop-types\";\nimport { register } from \"../../actions/auth\";\nimport Present_register from \"../../components/auth/Register\";\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    category: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n  const { name, email, category, password, password2 } = formData;\n  const onChange = (e) =>\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (password !== password2) setAlert(\"Passwords dont match\", \"danger\");\n    else register({ name, email, category, password });\n  };\n\n  return (\n    <Present_register\n      isAuthenticated={isAuthenticated}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      formData={formData}\n    />\n  );\n};\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n};\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\nexport default connect(mapStateToProps, { setAlert, register })(Register);\n"]},"metadata":{},"sourceType":"module"}